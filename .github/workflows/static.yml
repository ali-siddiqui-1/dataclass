d1

Code
import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML

# --- Load Data ---
# Ensure these files are in the same directory as the .qmd file
try:
    metadata = pd.read_csv('unicef_metadata.csv')
    indicator_1 = pd.read_csv('unicef_indicator_1.csv')
except FileNotFoundError:
    print("<p style='color:red; font-weight:bold;'>Error: Data files (unicef_metadata.csv, unicef_indicator_1.csv) not found.</p>")
    # Stop execution if files are missing
    raise SystemExit("Data files not found.")

# --- Explicit metadata column names ---
country_col = 'country'
beds_col   = 'Hospital beds (per 1,000 people)'
fuel_col   = 'Fossil fuel energy consumption (% of total)'
mil_col    = 'Military expenditure (% of GDP)'
gdp_col    = 'GDP per capita (constant 2015 US$)'
year_col   = 'year'  # as per user

# --- Pre-clean metadata numeric fields ---
# Use list for multiple columns
metadata[[beds_col, fuel_col, mil_col, gdp_col]] = metadata[[beds_col, fuel_col, mil_col, gdp_col]].apply(pd.to_numeric, errors='coerce')
metadata[year_col] = pd.to_numeric(metadata[year_col], errors='coerce')

# --- Prepare indicator_1 for maternal deaths ---
indicator_1['time_period'] = pd.to_numeric(indicator_1['time_period'], errors='coerce')
# Find the maternal indicator robustly
mat_indicators = [i for i in indicator_1['indicator'].unique() if isinstance(i, str) and 'maternal' in i.lower()]
if not mat_indicators:
    print("<p style='color:red; font-weight:bold;'>Error: Maternal indicator not found in indicator_1.csv.</p>")
    raise SystemExit("Maternal indicator not found.")
mat_indicator = mat_indicators[0]

mat_df = indicator_1[indicator_1['indicator'] == mat_indicator][['country','time_period','obs_value']].copy()
mat_df['obs_value'] = pd.to_numeric(mat_df['obs_value'], errors='coerce')

# --- Widgets ---
country_options = sorted(metadata[country_col].dropna().unique()) # Drop NaNs from options
if not country_options:
     print("<p style='color:red; font-weight:bold;'>Error: No valid countries found in metadata.</p>")
     raise SystemExit("No countries found.")

country_dd = widgets.Dropdown(
    options=country_options,
    description='Country:',
    value="Nigeria" if country_options else None # Set default value
)

# Determine year range from data if possible, otherwise use fixed range
min_year_meta = metadata[year_col].min()
max_year_meta = metadata[year_col].max()
min_year_ind1 = mat_df['time_period'].min()
max_year_ind1 = mat_df['time_period'].max()

# Combine ranges, handle potential NaNs
all_years = pd.concat([metadata[year_col], mat_df['time_period']]).dropna()
min_year = int(all_years.min()) if not all_years.empty else 1960
max_year = int(all_years.max()) if not all_years.empty else 2023 # Using current year as fallback

year_slider = widgets.IntRangeSlider(
    value=[min_year, max_year],
    min=min_year, max=max_year, step=1,
    description='Years:', continuous_update=False,
    layout=widgets.Layout(width='400px')
)

labels_pretty = {
    gdp_col:  'GDP per capita (constant 2015 US$)',
    fuel_col: 'Fossil fuel energy consumption (% of total)',
    mil_col:  'Military expenditure (% of GDP)',
    beds_col: 'Hospital beds (per 1,000 people)',
    'Maternal Deaths': 'Maternal Deaths (Sum)'
}
order = [gdp_col, fuel_col, mil_col, beds_col, 'Maternal Deaths']

# --- Dashboard function ---
def dashboard(country, Years):
    start, end = Years
    
    # Filter metadata for the selected country and year range
    meta_rows = metadata[(metadata[country_col]==country) & 
                         (metadata[year_col]>=start) & 
                         (metadata[year_col]<=end)].copy() # Use .copy() to avoid SettingWithCopyWarning
    
    # Filter maternal death data
    mat_rows = mat_df[(mat_df['country']==country) & 
                      (mat_df['time_period']>=start) & 
                      (mat_df['time_period']<=end)].copy()

    if meta_rows.empty and mat_rows.empty:
        display(HTML(f"<div style='font-family:sans-serif; color:orange; padding:10px;'><b>No data available for {country} in {start}-{end}</b></div>"))
        return

    # Averages from metadata - calculate only if data exists
    avg_vals = meta_rows[[gdp_col, fuel_col, mil_col, beds_col]].mean(skipna=True)

    # Maternal deaths sum - calculate only if data exists
    mat_sum = mat_rows['obs_value'].sum(skipna=True)

    # Prepare dictionary for display, handling potential NaNs from calculations
    display_vals = {
        gdp_col:  avg_vals.get(gdp_col, float('nan')), # Use .get() for safety
        fuel_col: avg_vals.get(fuel_col, float('nan')),
        mil_col:  avg_vals.get(mil_col, float('nan')),
        beds_col: avg_vals.get(beds_col, float('nan')),
        'Maternal Deaths': mat_sum if pd.notna(mat_sum) else float('nan')
    }

    # Generate HTML rows, formatting numbers and handling NaNs gracefully
    rows_html = ""
    for col in order:
        val = display_vals[col]
        label_prefix = "AVG" if col != 'Maternal Deaths' else "SUM"
        
        if pd.isna(val):
            formatted_val = "N/A" # Display N/A for missing values
        elif col == 'Maternal Deaths':
             formatted_val = f"{val:,.0f}" # Format sum as integer
        else:
             formatted_val = f"{val:,.2f}" # Format averages to 2 decimal places

        rows_html += (
            f"<tr><td style='padding:6px;text-align:left;'>{label_prefix} {labels_pretty[col]}:</td>"
            f"<td style='text-align:right;'>{formatted_val}</td></tr>"
        )


    # Final HTML structure
    html = f"""
    <div style='border:2px solid #333;width:520px;font-family:sans-serif; margin-top: 15px;'>
      <h3 style='margin:6px 10px;'>{country} – Statistical Dashboard ({start}‑{end})</h3>
      <div style='background:#C26B51;color:white;padding:8px;'>
        <table style='width:100%;font-weight:bold;font-size:16px;'>
          {rows_html}
        </table>
      </div>
    </div>
"""
    display(HTML(html))

# --- Static Text HTML ---
top_html = """
<div style="font-family: 'Segoe UI', sans-serif;">
  <div style="background-color:#fbeee8; padding:15px; border-radius:5px; margin-bottom:10px;">
    <h3 style="margin:0; font-weight:700; color:#000;">
      Case Study:<br>
      Countries must reduce military spending and build sustainable energy consumption to improve healthcare
    </h3>
  </div>
  <div style="background-color:#f5efee; padding:20px; border-radius:5px;">
    <p style="margin:0;;text-align:center; font-size:18px;">
      <span style="color:#F28C28; font-weight:bold;">Healthcare</span> is a <span style="color:#F28C28; font-weight:bold;">basic necessity</span> every human deserves.
    </p>
    <p style="margin-top:10px;text-align:center; font-size:16px;">It comes before war.</p>
  </div>
</div>
"""

# --- Display Outputs ---
# Display the static HTML first
display(HTML(top_html))

# Display the interactive widgets and link them to the dashboard function
# This will automatically create the output area below the static HTML
widgets.interact(dashboard, country=country_dd, Years=year_slider);



# --- Additional Text HTML ---
additional_text = """
<div style="width: 30%; background-color:#f0f0f0; padding:15px; border-radius:5px;">
  <h4>Contextual Insight:</h4>
    <p style="font-size:14px; line-height:1.6;">    The global average for military expenditure to GDP ratio is about 2.4%. 
    However, this can differ significantly from one country to another, for example, the United States, known for having one of the highest military budgets, spends around 5.3% of its GDP on defense.
    Other countries may spend less than 1% of their GDP on military expenditures if they are smaller, have less geopolitical risk, or prioritize other areas of spending.
  </p>
</div>
"""



display(HTML(additional_text))





#GRAPH 2

# --- Nigeria Dual‑Axis Plot WITH robust trend‑lines (metadata only) ---
# Prerequisite: metadata = pd.read_csv('/content/unicef_metadata.csv')

import pandas as pd
import numpy as np
import plotly.graph_objects as go

# 1️⃣  Identify the required columns from metadata automatically
cols = metadata.columns
country_col = [c for c in cols if 'country' in c.lower()][0]
year_col    = [c for c in cols if 'year' in c.lower() or 'time_period' in c.lower()][0]
mil_col     = [c for c in cols if 'military' in c.lower() and 'gdp' in c.lower()][0]
bed_col     = [c for c in cols if 'hospital' in c.lower() and 'bed' in c.lower()][0]

# 2️⃣  Extract and tidy the dataframe
core = metadata[[country_col, year_col, mil_col, bed_col]].copy()
core[year_col] = pd.to_numeric(core[year_col], errors='coerce')
core = core.dropna(subset=[year_col])
core[year_col] = core[year_col].astype(int)

# 3️⃣  Filter for Nigeria only
nigeria = core[core[country_col].str.strip().str.lower() == 'nigeria'].sort_values(year_col)

if nigeria.empty:
    print("❌ No data found for Nigeria in the metadata file.")
else:
    # Separate dataframes for each series to handle missing values independently
    mil_df = nigeria.dropna(subset=[mil_col])
    bed_df = nigeria.dropna(subset=[bed_col])

    # --- Compute trend lines only if at least 2 points exist ---
    def linear_trend(x_series, y_series):
        if len(x_series) < 2:
            return None
        coef = np.polyfit(x_series, y_series, 1)
        return np.poly1d(coef)(x_series)

    mil_trend = linear_trend(mil_df[year_col].values, mil_df[mil_col].astype(float).values)
    bed_trend = linear_trend(bed_df[year_col].values, bed_df[bed_col].astype(float).values)

    # --- Plot ---
    fig = go.Figure()

    # Military actual
    fig.add_trace(go.Scatter(
        x=mil_df[year_col],
        y=mil_df[mil_col],
        name='Military expenditure (% of GDP)',
        mode='lines+markers',
        yaxis='y1',
        line=dict(color='firebrick', width=2)
    ))

    # Hospital beds actual
    fig.add_trace(go.Scatter(
        x=bed_df[year_col],
        y=bed_df[bed_col],
        name='Hospital beds (per 1,000 people)',
        mode='lines+markers',
        yaxis='y2',
        line=dict(color='teal', width=2, dash='dash')
    ))

    # Military trend line
    if mil_trend is not None:
        fig.add_trace(go.Scatter(
            x=mil_df[year_col],
            y=mil_trend,
            name='Military trend',
            mode='lines',
            yaxis='y1',
            line=dict(color='firebrick', width=1, dash='dot')
        ))

    # Hospital beds trend line
    if bed_trend is not None:
        fig.add_trace(go.Scatter(
            x=bed_df[year_col],
            y=bed_trend,
            name='Hospital beds trend',
            mode='lines',
            yaxis='y2',
            line=dict(color='teal', width=1, dash='dot')
        ))

    fig.update_layout(
        title="Nigeria – Military Expenditure vs Hospital Beds (with trend‑lines)",
        xaxis_title='Year',
        yaxis=dict(title='Military expenditure (% of GDP)', side='left'),
        yaxis2=dict(title='Hospital beds (per 1,000 people)', overlaying='y', side='right'),
        template='plotly_white',
        height=650,
        legend=dict(x=0.01, y=0.99)
    )

    fig.show()

# --- Additional Text HTML ---
last_text2 = """
<div style="width: 30%; background-color:#f0f0f0; padding:15px; border-radius:5px;">
  <h4>High military expenses come at the cost of healthcare</h4>
    <p style="font-size:14px; line-height:1.6;">    Data:
This graph compares military spending vs. hospital beds per 1,000 people.
Problem:
High military budgets correlate with insufficient healthcare infrastructure.
Solution:
Reallocating funds towards healthcare enhances medical facilities and access.
Consequences:
Better healthcare resources could lead to improved public health outcomes & life expectancy.
Example: Nigeria decreased military spending & healthcare improved.

  </p>
</div>
"""

display(HTML(last_text2))

### GRAPH 3

# --------------------------------------------------------------
# Packed Bubble – Σ GDP per capita size | AVG Fossil‑Fuel % colour
# (African countries only, excludes zero‑percent fossil‑fuel averages)
# --------------------------------------------------------------
# Usage in Colab:
#     metadata = pd.read_csv('/content/unicef_metadata.csv')
# --------------------------------------------------------------


import pandas as pd, plotly.graph_objects as go
!pip install -q circlify
import circlify, numpy as np


# Columns
country_col = 'country'
gdp_col  = 'GDP per capita (constant 2015 US$)'
fuel_col = 'Fossil fuel energy consumption (% of total)'


# Ensure numeric
md = metadata.copy()
md[gdp_col]  = pd.to_numeric(md[gdp_col], errors='coerce')
md[fuel_col] = pd.to_numeric(md[fuel_col], errors='coerce')


# ------------------------------------------------------------------
# Build definitive African country list (hard‑coded master intersect data)
# ------------------------------------------------------------------
africa_master = {
   'Algeria','Angola','Benin','Botswana','Burkina Faso','Burundi','Cabo Verde','Cameroon','Central African Republic',
   'Chad','Comoros','Democratic Republic of the Congo','Republic of Congo','Côte d’Ivoire','Djibouti','Egypt',
   'Equatorial Guinea','Eritrea','Eswatini','Ethiopia','Gabon','Gambia','Ghana','Guinea','Guinea‑Bissau','Kenya',
   'Lesotho','Liberia','Libya','Madagascar','Malawi','Mali','Mauritania','Mauritius','Morocco','Mozambique',
   'Namibia','Niger','Nigeria','Rwanda','Sao Tome and Principe','São Tomé and Príncipe','Senegal','Seychelles',
   'Sierra Leone','Somalia','South Africa','South Sudan','Sudan','Tanzania','Togo','Tunisia','Uganda','Zambia','Zimbabwe'
}


africa_set = set(md[country_col].dropna()).intersection(africa_master)


# Filter + keep only positive fossil‑fuel averages
af = md[md[country_col].isin(africa_set) & (md[fuel_col] > 0)]


# Aggregate Σ GDPpc & AVG fossil‑fuel %
agg = (af.groupby(country_col)
         .agg(size_val=(gdp_col, 'sum'), color_val=(fuel_col, 'mean'))
         .query('size_val > 0 and color_val > 0')
         .reset_index())


# ------------------------------------------------------------------
# Circle packing
# ------------------------------------------------------------------
agg_sorted = agg.sort_values('size_val', ascending=False).reset_index(drop=True)
vals  = agg_sorted['size_val'].tolist()
cols  = agg_sorted['color_val'].tolist()
labels = agg_sorted[country_col].tolist()


circles = circlify.circlify(vals, show_enclosure=False, target_enclosure=circlify.Circle(0,0,1))
scale = 250 / max(c.r for c in circles)


xs, ys, diams, texts, hover = [], [], [], [], []
for cir, gdp_sum, fuel_pct, lab in zip(circles, vals, cols, labels):
   xs.append(cir.x)
   ys.append(cir.y)
   diams.append(cir.r * scale)
   texts.append(f"{lab}\n{fuel_pct:.2f}%")
   hover.append(f"{lab}<br>Σ GDPpc: {gdp_sum:,.0f}<br>Avg Fuel %: {fuel_pct:.2f}")


# ------------------------------------------------------------------
# Plot
# ------------------------------------------------------------------
fig = go.Figure(go.Scatter(
   x=xs, y=ys, mode='markers+text',
   marker=dict(size=diams, sizemode='diameter', color=cols,
               colorscale=[[0,'#C26B51'], [1,'#529985']],  # red→green (low→high)
               cmin=min(cols), cmax=max(cols),
               line=dict(width=1, color='white'), opacity=0.9),
   text=texts,
   textposition='middle center', textfont=dict(size=9, color='black'),
   hovertext=hover, hoverinfo='text'
))


fig.update_layout(title='Africa – Bubble size: Σ GDP per capita (2015 US$) | Colour: AVG Fossil‑Fuel %',
                 xaxis=dict(visible=False), yaxis=dict(visible=False, scaleanchor='x', scaleratio=1),
                 showlegend=False, height=700, template='plotly_white',
                 margin=dict(l=10, r=10, t=60, b=10))


fig.show()

# --- Additional Text HTML ---
last_text3 = """
<div style="width: 30%; background-color:#f0f0f0; padding:15px; border-radius:5px;">
  <h4>Energy consumption is directly proportional to positive healthcare - sustainable energy consumption is a MUST
</h4>
    <p style="font-size:14px; line-height:1.6;">    Data: 
The figures display fossil fuel consumption alongside maternal mortality rates.
Problem: 
High fossil fuel use correlates with low maternal deaths - good for healthcare, bad for environment.
Solution: 
Investing in renewable energy can bring sustainability in healthcare industry.
Consequences: 
Such initiatives could lead to a healthier environment, improved maternal health, and reduced public health expenditures.
Example: Nigeria has low fuel consumption and highest maternal deaths. 

  </p>
</div>
"""

display(HTML(last_text3))


## GRAPH 4

# --------------------------------------------------------------
# Choropleth Map – Maternal Deaths Across Africa (latest year)
# --------------------------------------------------------------
# Prereq (run beforehand):
# indicator_1 = pd.read_csv('/content/unicef_indicator_1.csv')
# metadata    = pd.read_csv('/content/unicef_metadata.csv')
# --------------------------------------------------------------


import pandas as pd, geopandas as gpd, plotly.express as px, json


# 1️⃣  Identify maternal‑death indicator & latest value per country
maternal_ind = [i for i in indicator_1['indicator'].unique() if 'maternal' in i.lower()][0]
mat = indicator_1[indicator_1['indicator'] == maternal_ind].copy()
mat['obs_value'] = pd.to_numeric(mat['obs_value'], errors='coerce')
mat = mat.dropna(subset=['obs_value'])
mat['year'] = mat['time_period'].astype(int)
mat = mat.sort_values('year').groupby('country', as_index=False).tail(1)


# 2️⃣  Build Africa country list from metadata (create continent col if needed)
country_col = [c for c in metadata.columns if 'country' in c.lower()][0]
if any('continent' in c.lower() for c in metadata.columns):
   cont_col = [c for c in metadata.columns if 'continent' in c.lower()][0]
else:
   africa_set = set(mat['country'])  # minimal fallback
   metadata['continent_tmp'] = metadata[country_col].apply(lambda x: 'Africa' if x in africa_set else 'Other')
   cont_col = 'continent_tmp'


africa = metadata[metadata[cont_col] == 'Africa'][country_col].unique()
mat = mat[mat['country'].isin(africa)]


# 3️⃣  Natural Earth boundaries
world = gpd.read_file(
   'https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_110m_admin_0_countries.geojson'
)[['ADMIN','geometry']].rename(columns={'ADMIN':'name'})


# minimal name harmonisation
name_map = {
   'Democratic Republic of the Congo': 'Democratic Republic of the Congo',
   'Republic of Congo': 'Congo',
   'Côte d’Ivoire': "Côte d'Ivoire",
}
mat['name'] = mat['country'].replace(name_map)


# 4️⃣  Merge geometry with data
plot_df = world.merge(mat, on='name', how='inner')
geojson_dict = json.loads(plot_df.to_json())


# 5️⃣  Choropleth (custom green→red palette)
fig = px.choropleth(
   plot_df,
   geojson=geojson_dict,
   featureidkey='properties.name',
   locations='name',
   color='obs_value',
   color_continuous_scale=[[0.0,'#529985'], [1.0,'#C26B51']],
   range_color=(plot_df['obs_value'].min(), plot_df['obs_value'].max()),
   hover_name='name',
   labels={'obs_value':'Maternal deaths'},
   title='Maternal Deaths Across Africa (latest year available)'
)
fig.update_geos(fitbounds='locations', visible=False, scope='africa')


# 6️⃣  Highlight Nigeria
nig = plot_df[plot_df['name']=='Nigeria']
if not nig.empty:
   # project to Web Mercator before centroid
   cen = nig.to_crs(3857).centroid.to_crs(4326).iloc[0]
   fig.add_scattergeo(lon=[cen.x], lat=[cen.y], mode='markers+text',
                      marker=dict(size=10, color='black'),
                      text=['Nigeria'], textposition='top center', showlegend=False)


fig.update_layout(height=650, margin=dict(l=0,r=0,t=60,b=0))
fig.show()


# --- Additional Text HTML ---
last_text = """
<div style="width: 30%; background-color:#f0f0f0; padding:15px; border-radius:5px;">
  <h4>Solution:</h4>
    <p style="font-size:14px; line-height:1.6;">    The global average for military expenditure to GDP ratio is about 2.4%. 
    Enhancing energy consumption through solar & renewable sources, and improve infrastructure for better GDP & lifestyle.
Consequences: 
Improved maternal health and reduced mortality rates.
  </p>
</div>
"""

display(HTML(last_text))
Case Study: Countries must reduce military spending and build sustainable energy consumption to improve healthcare 
Healthcare is a basic necessity every human deserves. 
It comes before war.

Contextual Insight:
The global average for military expenditure to GDP ratio is about 2.4%. However, this can differ significantly from one country to another, for example, the United States, known for having one of the highest military budgets, spends around 5.3% of its GDP on defense. Other countries may spend less than 1% of their GDP on military expenditures if they are smaller, have less geopolitical risk, or prioritize other areas of spending. 


High military expenses come at the cost of healthcare
Data: This graph compares military spending vs. hospital beds per 1,000 people. Problem: High military budgets correlate with insufficient healthcare infrastructure. Solution: Reallocating funds towards healthcare enhances medical facilities and access. Consequences: Better healthcare resources could lead to improved public health outcomes & life expectancy. Example: Nigeria decreased military spending & healthcare improved. 

Energy consumption is directly proportional to positive healthcare - sustainable energy consumption is a MUST 
Data: The figures display fossil fuel consumption alongside maternal mortality rates. Problem: High fossil fuel use correlates with low maternal deaths - good for healthcare, bad for environment. Solution: Investing in renewable energy can bring sustainability in healthcare industry. Consequences: Such initiatives could lead to a healthier environment, improved maternal health, and reduced public health expenditures. Example: Nigeria has low fuel consumption and highest maternal deaths. 

Solution:
The global average for military expenditure to GDP ratio is about 2.4%. Enhancing energy consumption through solar & renewable sources, and improve infrastructure for better GDP & lifestyle. Consequences: Improved maternal health and reduced mortality rates. 
